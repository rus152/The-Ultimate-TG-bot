================================================================
Directory Structure
================================================================
docker-compose.yml
Dockerfile
example.env
main.py
monitor.py
README.md
requirements.txt

================================================================
Files
================================================================

================
File: monitor.py
================
#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è Telegram –±–æ—Ç–∞
"""

import os
import sys
import time
import logging
import requests
from datetime import datetime
from typing import Dict, Any

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('monitor.log'),
        logging.StreamHandler()
    ]
)

class BotMonitor:
    def __init__(self, bot_token: str):
        self.bot_token = bot_token
        self.base_url = f"https://api.telegram.org/bot{bot_token}"
        
    def get_bot_info(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ"""
        try:
            response = requests.get(f"{self.base_url}/getMe", timeout=10)
            response.raise_for_status()
            return response.json()
        except requests.RequestException as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–æ—Ç–µ: {e}")
            return {}
    
    def get_updates_count(self) -> int:
        """–ü–æ–ª—É—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π"""
        try:
            response = requests.get(f"{self.base_url}/getUpdates", timeout=10)
            response.raise_for_status()
            data = response.json()
            return len(data.get('result', []))
        except requests.RequestException as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π: {e}")
            return -1
    
    def check_webhook(self) -> Dict[str, Any]:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å webhook"""
        try:
            response = requests.get(f"{self.base_url}/getWebhookInfo", timeout=10)
            response.raise_for_status()
            return response.json().get('result', {})
        except requests.RequestException as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ webhook: {e}")
            return {}
    
    def check_bot_health(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∑–¥–æ—Ä–æ–≤—å–µ –±–æ—Ç–∞"""
        bot_info = self.get_bot_info()
        if not bot_info.get('ok', False):
            logging.error("–ë–æ—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            return False
        
        bot_data = bot_info.get('result', {})
        logging.info(f"–ë–æ—Ç –∞–∫—Ç–∏–≤–µ–Ω: {bot_data.get('username', 'Unknown')}")
        return True
    
    def monitor_loop(self, interval: int = 60):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        logging.info("–ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –±–æ—Ç–∞...")
        
        while True:
            try:
                start_time = time.time()
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è –±–æ—Ç–∞
                is_healthy = self.check_bot_health()
                
                # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
                updates_count = self.get_updates_count()
                webhook_info = self.check_webhook()
                
                # –í—ã–≤–æ–¥ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
                logging.info(f"–°—Ç–∞—Ç—É—Å: {'OK' if is_healthy else 'ERROR'}")
                logging.info(f"–û–±–Ω–æ–≤–ª–µ–Ω–∏–π –≤ –æ—á–µ—Ä–µ–¥–∏: {updates_count}")
                
                if webhook_info:
                    logging.info(f"Webhook URL: {webhook_info.get('url', '–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω')}")
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–≥–æ–≤ –±–æ—Ç–∞
                if os.path.exists('bot.log'):
                    stat = os.stat('bot.log')
                    logging.info(f"–†–∞–∑–º–µ—Ä –ª–æ–≥–∞: {stat.st_size} –±–∞–π—Ç")
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –¥–∏—Å–∫–∞
                disk_usage = self.check_disk_usage()
                if disk_usage > 80:
                    logging.warning(f"–í—ã—Å–æ–∫–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –¥–∏—Å–∫–∞: {disk_usage}%")
                
                elapsed_time = time.time() - start_time
                logging.info(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∑–∞ {elapsed_time:.2f} —Å–µ–∫—É–Ω–¥")
                
                time.sleep(interval)
                
            except KeyboardInterrupt:
                logging.info("–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
                break
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {e}")
                time.sleep(interval)
    
    def check_disk_usage(self) -> float:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –¥–∏—Å–∫–∞"""
        try:
            import shutil
            total, used, free = shutil.disk_usage('.')
            return (used / total) * 100
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –¥–∏—Å–∫–∞: {e}")
            return 0

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    bot_token = os.getenv('TELEGRAM_BOT_TOKEN')
    if not bot_token:
        logging.error("–ù–µ –Ω–∞–π–¥–µ–Ω TELEGRAM_BOT_TOKEN –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        sys.exit(1)
    
    monitor = BotMonitor(bot_token)
    
    # –†–∞–∑–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∏–ª–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
    if len(sys.argv) > 1 and sys.argv[1] == '--once':
        monitor.check_bot_health()
    else:
        interval = int(os.getenv('MONITOR_INTERVAL', '60'))
        monitor.monitor_loop(interval)

if __name__ == '__main__':
    main()

================
File: README.md
================
# The Ultimate Telegram Bot

–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π Telegram-–±–æ—Ç –¥–ª—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∏ –≤–∏–¥–µ–æ-–∑–∞–º–µ—Ç–æ–∫ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º OpenAI Whisper.

## –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏

- üéôÔ∏è –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
- üìπ –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –≤–∏–¥–µ–æ-–∑–∞–º–µ—Ç–æ–∫ (–∫—Ä—É–∂–æ—á–∫–∏)
- üöÄ –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å –æ—á–µ—Ä–µ–¥—å—é
- üîí –†–µ–∂–∏–º –æ—Ç–ª–∞–¥–∫–∏ –¥–ª—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞
- üìù –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ–µ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ –¥–ª–∏–Ω–Ω—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤
- üîÑ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ CUDA –¥–ª—è —É—Å–∫–æ—Ä–µ–Ω–∏—è
- üê≥ Docker-–∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∏–∑–∞—Ü–∏—è
- üìä –ü–æ–¥—Ä–æ–±–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ

## –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è

- Python 3.8+
- FFmpeg
- NVIDIA GPU (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ, –¥–ª—è —É—Å–∫–æ—Ä–µ–Ω–∏—è)
- Docker –∏ Docker Compose (–¥–ª—è –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∏–∑–∞—Ü–∏–∏)

## –£—Å—Ç–∞–Ω–æ–≤–∫–∞

### –õ–æ–∫–∞–ª—å–Ω–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞

1. **–ö–ª–æ–Ω–∏—Ä—É–π—Ç–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π:**

   ```bash
   git clone <repository_url>
   cd The-Ultimate-TG-bot
   ```

2. **–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏:**

   ```bash
   pip install -r requirements.txt
   ```

3. **–ù–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è:**

   ```bash
   cp example.env .env
   # –û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ .env —Ñ–∞–π–ª —Å –≤–∞—à–∏–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
   ```

4. **–ó–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞:**

   ```bash
   python main.py
   ```

### Docker —É—Å—Ç–∞–Ω–æ–≤–∫–∞

1. **–ö–ª–æ–Ω–∏—Ä—É–π—Ç–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π:**

   ```bash
   git clone <repository_url>
   cd The-Ultimate-TG-bot
   ```

2. **–ù–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è:**

   ```bash
   cp example.env .env
   # –û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ .env —Ñ–∞–π–ª —Å –≤–∞—à–∏–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
   ```

3. **–ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å Docker Compose:**

   ```bash
   docker-compose up -d
   ```

## –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è

### –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è

| –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è | –û–±—è–∑–∞—Ç–µ–ª—å–Ω–∞—è | –û–ø–∏—Å–∞–Ω–∏–µ | –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é |
|-----------|-------------|----------|----------------------|
| `TELEGRAM_BOT_TOKEN` | –î–∞ | –¢–æ–∫–µ–Ω Telegram –±–æ—Ç–∞ | - |
| `DEBUG_CHAT_ID` | –ù–µ—Ç | ID —á–∞—Ç–∞ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ | - |
| `DEBUG_MODE` | –ù–µ—Ç | –í–∫–ª—é—á–∏—Ç—å —Ä–µ–∂–∏–º –æ—Ç–ª–∞–¥–∫–∏ | `False` |
| `LOG_LEVEL` | –ù–µ—Ç | –£—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è | `INFO` |
| `MAX_MESSAGE_LENGTH` | –ù–µ—Ç | –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è | `3696` |
| `VOICE_FOLDER` | –ù–µ—Ç | –ü–∞–ø–∫–∞ –¥–ª—è –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤ | `voice_messages` |
| `VIDEO_NOTE_FOLDER` | –ù–µ—Ç | –ü–∞–ø–∫–∞ –¥–ª—è –≤–∏–¥–µ–æ —Ñ–∞–π–ª–æ–≤ | `video_notes` |

### –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –±–æ—Ç–∞

1. –ù–∞–π–¥–∏—Ç–µ [@BotFather](https://t.me/BotFather) –≤ Telegram
2. –û—Ç–ø—Ä–∞–≤—å—Ç–µ `/newbot`
3. –°–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –±–æ—Ç–∞
4. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ —Ç–æ–∫–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é `TELEGRAM_BOT_TOKEN`

## –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ

### –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã

- **–ì–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è** - –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç—É
- **–í–∏–¥–µ–æ-–∑–∞–º–µ—Ç–∫–∏** - –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∏–¥–µ–æ-–∑–∞–º–µ—Ç–∫—É (–∫—Ä—É–∂–æ—á–µ–∫) –±–æ—Ç—É
- `/check` - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –æ—á–µ—Ä–µ–¥—å –æ–±—Ä–∞–±–æ—Ç–∫–∏
- `/everyone` - —É–ø–æ–º—è–Ω—É—Ç—å –≤—Å–µ—Ö –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –≤ –≥—Ä—É–ø–ø–µ

### –†–µ–∂–∏–º –æ—Ç–ª–∞–¥–∫–∏

–ö–æ–≥–¥–∞ –≤–∫–ª—é—á–µ–Ω —Ä–µ–∂–∏–º –æ—Ç–ª–∞–¥–∫–∏ (`DEBUG_MODE=True`), –±–æ—Ç –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å —Ç–æ–ª—å–∫–æ –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–º —á–∞—Ç–µ (`DEBUG_CHAT_ID`). –≠—Ç–æ –ø–æ–ª–µ–∑–Ω–æ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.

## –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞

### –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã

- **Config** - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π
- **ChatManager** - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—á–µ—Ä–µ–¥—å—é –æ–±—Ä–∞–±–æ—Ç–∫–∏
- **VoiceBot** - –æ—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å –±–æ—Ç–∞
- **Logging** - —Å–∏—Å—Ç–µ–º–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Å —Ä–æ—Ç–∞—Ü–∏–µ–π —Ñ–∞–π–ª–æ–≤

### –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π

1. –ü–æ–ª—É—á–µ–Ω–∏–µ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è/–≤–∏–¥–µ–æ-–∑–∞–º–µ—Ç–∫–∏
2. –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
3. –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –æ—á–µ—Ä–µ–¥—å –æ–±—Ä–∞–±–æ—Ç–∫–∏
4. –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è —Å –ø–æ–º–æ—â—å—é Whisper
5. –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –¥–ª–∏–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –Ω–∞ —á–∞—Å—Ç–∏
6. –û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é

## –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥

### –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ

–ë–æ—Ç —Å–æ–∑–¥–∞–µ—Ç –ø–æ–¥—Ä–æ–±–Ω—ã–µ –ª–æ–≥–∏ —Å —Ä–æ—Ç–∞—Ü–∏–µ–π —Ñ–∞–π–ª–æ–≤:

- –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –ª–æ–≥–∞: 10MB
- –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞—Ä—Ö–∏–≤–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤: 5
- –£—Ä–æ–≤–Ω–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è: DEBUG, INFO, WARNING, ERROR, CRITICAL

### Docker Health Check

–ü—Ä–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ Docker, –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç—Å—è –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥.

## –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å

### –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è GPU

–ü—Ä–∏ –Ω–∞–ª–∏—á–∏–∏ NVIDIA GPU, –±–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç CUDA –¥–ª—è —É—Å–∫–æ—Ä–µ–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏.

### –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–∞–º—è—Ç—å—é

- Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –æ–≥—Ä–∞–Ω–∏—á–µ–Ω 4GB RAM
- –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
- –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –±–æ–ª—å—à–∏—Ö —Ñ–∞–π–ª–æ–≤

## –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å

- –ó–∞–ø—É—Å–∫ –æ—Ç –Ω–µ–ø—Ä–∏–≤–∏–ª–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
- –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ Docker
- –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
- –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫

## –£—Å—Ç—Ä–∞–Ω–µ–Ω–∏–µ –Ω–µ–ø–æ–ª–∞–¥–æ–∫

### –û–±—â–∏–µ –ø—Ä–æ–±–ª–µ–º—ã

1. **–û—à–∏–±–∫–∞ "Model not found"**
   - –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —É –≤–∞—Å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–µ—Å—Ç–∞ –Ω–∞ –¥–∏—Å–∫–µ
   - –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –º–æ–¥–µ–ª–∏

2. **–û—à–∏–±–∫–∞ "CUDA out of memory"**
   - –£–º–µ–Ω—å—à–∏—Ç–µ —Ä–∞–∑–º–µ—Ä –º–æ–¥–µ–ª–∏ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ CPU

3. **–ë–æ—Ç –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç**
   - –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ç–æ–∫–µ–Ω –±–æ—Ç–∞
   - –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –±–æ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ —á–∞—Ç

### –õ–æ–≥–∏

–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∞–π–ª `bot.log` –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –æ—à–∏–±–∫–∞—Ö.

## –†–∞–∑—Ä–∞–±–æ—Ç–∫–∞

### –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—Ä–æ–µ–∫—Ç–∞

```
‚îú‚îÄ‚îÄ main.py              # –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–¥ –±–æ—Ç–∞
‚îú‚îÄ‚îÄ requirements.txt     # Python –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
‚îú‚îÄ‚îÄ Dockerfile          # Docker –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
‚îú‚îÄ‚îÄ docker-compose.yml  # Docker Compose –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
‚îú‚îÄ‚îÄ example.env         # –ü—Ä–∏–º–µ—Ä –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
‚îî‚îÄ‚îÄ README.md           # –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è
```

### –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ

1. –°–æ–∑–¥–∞–π—Ç–µ —Ç–µ—Å—Ç–æ–≤—ã–π –±–æ—Ç
2. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ `DEBUG_MODE=True`
3. –£–∫–∞–∂–∏—Ç–µ `DEBUG_CHAT_ID` –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è

## –õ–∏—Ü–µ–Ω–∑–∏—è

–≠—Ç–æ—Ç –ø—Ä–æ–µ–∫—Ç —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω—è–µ—Ç—Å—è –ø–æ–¥ –ª–∏—Ü–µ–Ω–∑–∏–µ–π MIT.

## –ü–æ–¥–¥–µ—Ä–∂–∫–∞

–ü—Ä–∏ –≤–æ–∑–Ω–∏–∫–Ω–æ–≤–µ–Ω–∏–∏ –ø—Ä–æ–±–ª–µ–º —Å–æ–∑–¥–∞–π—Ç–µ issue –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏.

================
File: example.env
================
# Rename this file to .env and fill in your actual values

# Telegram Bot Token (required)
# Get this from @BotFather on Telegram
TELEGRAM_BOT_TOKEN=your_telegram_bot_token_here

# Debug Chat ID (optional)
# Chat ID where the bot will work in debug mode
# Use negative values for group chats: -1001234567890
# Use positive values for private chats: 123456789
DEBUG_CHAT_ID=

# Debug Mode (optional)
# Set to True to enable debug mode (bot will only work in DEBUG_CHAT_ID)
# Set to False to disable debug mode (bot will work in all chats)
DEBUG_MODE=False

# Logging Level (optional)
# Available levels: DEBUG, INFO, WARNING, ERROR, CRITICAL
LOG_LEVEL=INFO

# Voice Processing Settings (optional)
# Maximum message length for Telegram messages
MAX_MESSAGE_LENGTH=3696

# Folders for storing temporary files
VOICE_FOLDER=voice_messages
VIDEO_NOTE_FOLDER=video_notes

================
File: docker-compose.yml
================
# docker-compose.yml

services:
  voice_bot:
    container_name: whisper_voice_bot
    build:
      context: .
      dockerfile: Dockerfile
      target: runtime
    image: the80hz/utgb:latest
    
    # GPU support for NVIDIA
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]
    
    # Environment configuration
    env_file:
      - .env
    
    # Persistent storage for logs
    volumes:
      - ./logs:/app/logs
      - ./voice_messages:/app/voice_messages
      - ./video_notes:/app/video_notes
    
    # Restart policy
    restart: unless-stopped
    
    # Health check
    healthcheck:
      test: ["CMD", "python", "-c", "import sys; sys.exit(0)"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    
    # Security settings
    security_opt:
      - no-new-privileges:true
    
    # Logging configuration
    logging:
      driver: json-file
      options:
        max-size: "10m"
        max-file: "3"
    
    # Resource limits
    mem_limit: 4g
    mem_reservation: 2g
    
    # Network configuration
    networks:
      - voice_bot_network

networks:
  voice_bot_network:
    driver: bridge
    name: voice_bot_network

================
File: requirements.txt
================
# requirements.txt

# –û—Å–Ω–æ–≤–Ω—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
pydub>=0.25.1
PyTelegramBotAPI>=4.14.0
openai-whisper>=20231117

# –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞—É–¥–∏–æ
torch>=2.0.0
torchaudio>=2.0.0

# –î–ª—è —É–ª—É—á—à–µ–Ω–Ω–æ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
ffmpeg-python>=0.2.0

# –î–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—É—Ç–µ–π
pathlib2>=2.3.7

================
File: Dockerfile
================
# Dockerfile

# Stage 1: Build
FROM pytorch/pytorch:2.4.0-cuda11.8-cudnn9-runtime AS build

WORKDIR /app

# Copy requirements first for better caching
COPY requirements.txt .

# Install Python dependencies
RUN python -m venv venv && \
    ./venv/bin/pip install --upgrade pip && \
    ./venv/bin/pip install --prefer-binary --no-cache-dir -r requirements.txt

# Copy source code
COPY main.py ./

# Stage 2: Production runtime
FROM pytorch/pytorch:2.4.0-cuda11.8-cudnn9-runtime AS runtime

# Install system dependencies
RUN apt-get update && apt-get install -y --no-install-recommends \
    ffmpeg \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/* /tmp/* /root/.cache/*

# Create non-root user for security
RUN useradd --create-home --shell /bin/bash --uid 1000 appuser

WORKDIR /app

# Copy Python environment and source code from build stage
COPY --from=build /app/venv ./venv
COPY --from=build /app/main.py ./

# Create directories for voice files
RUN mkdir -p voice_messages video_notes logs && \
    chown -R appuser:appuser /app

# Switch to non-root user
USER appuser

# Set environment variables
ENV PATH="/app/venv/bin:$PATH" \
    PYTHONUNBUFFERED=1 \
    PYTHONIOENCODING=UTF-8 \
    PYTHONDONTWRITEBYTECODE=1

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
    CMD python -c "import sys; sys.exit(0)"

# Run the application
CMD ["python", "main.py"]

================
File: main.py
================
# main.py

import os
import logging
import time
import contextlib
from threading import Thread, Lock
from typing import List, Optional, Dict, Any
from dataclasses import dataclass
from pathlib import Path
from logging.handlers import RotatingFileHandler
import socket
import requests
from urllib3.exceptions import ProtocolError
from http.client import RemoteDisconnected

import telebot
from telebot.formatting import hcite
from pydub import AudioSegment
import whisper
from torch import cuda


@dataclass
class Config:
    telegram_bot_token: str
    debug_chat_id: Optional[int] = None
    debug_mode: bool = False
    voice_folder: str = 'voice_messages'
    video_note_folder: str = 'video_notes'
    max_message_length: int = 3696
    log_level: str = 'INFO'
    
    @classmethod
    def from_env(cls) -> 'Config':
        """–°–æ–∑–¥–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
        token = os.getenv('TELEGRAM_BOT_TOKEN')
        if not token:
            raise ValueError('TELEGRAM_BOT_TOKEN not found in environment variables')
        
        debug_chat_id_str = os.getenv('DEBUG_CHAT_ID')
        debug_chat_id = None
        if debug_chat_id_str:
            try:
                debug_chat_id = int(debug_chat_id_str)
            except ValueError:
                raise ValueError('Invalid DEBUG_CHAT_ID. It should be a numeric value.')
        
        debug_mode = os.getenv('DEBUG_MODE', 'False').lower() == 'true'
        voice_folder = os.getenv('VOICE_FOLDER', 'voice_messages')
        video_note_folder = os.getenv('VIDEO_NOTE_FOLDER', 'video_notes')
        max_message_length = int(os.getenv('MAX_MESSAGE_LENGTH', '3696'))
        log_level = os.getenv('LOG_LEVEL', 'INFO')
        
        return cls(
            telegram_bot_token=token,
            debug_chat_id=debug_chat_id,
            debug_mode=debug_mode,
            voice_folder=voice_folder,
            video_note_folder=video_note_folder,
            max_message_length=max_message_length,
            log_level=log_level
        )


@dataclass
class ChatData:
    chat_id: int
    message_id: int
    path: str


def setup_logging(filename: str, level: str = 'INFO') -> None:
    """–£–ª—É—á—à–µ–Ω–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Å —Ä–æ—Ç–∞—Ü–∏–µ–π —Ñ–∞–π–ª–æ–≤"""
    logger = logging.getLogger()
    
    # –û—á–∏—Å—Ç–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    for handler in logger.handlers[:]:
        logger.removeHandler(handler)
    
    log_level = getattr(logging, level.upper(), logging.INFO)
    logger.setLevel(log_level)

    formatter = logging.Formatter(
        '%(asctime)s - %(name)s - %(levelname)s - %(message)s'
    )

    # –§–∞–π–ª–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å —Ä–æ—Ç–∞—Ü–∏–µ–π
    file_handler = RotatingFileHandler(
        filename, maxBytes=10*1024*1024, backupCount=5
    )
    file_handler.setFormatter(formatter)

    console_handler = logging.StreamHandler()
    console_handler.setFormatter(formatter)

    logger.addHandler(file_handler)
    logger.addHandler(console_handler)


class ChatManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –æ—á–µ—Ä–µ–¥–∏ —á–∞—Ç–æ–≤ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –º–Ω–æ–≥–æ–ø–æ—Ç–æ—á–Ω–æ—Å—Ç–∏"""
    
    def __init__(self):
        logging.info('Initializing chat manager')
        self._chat_data: List[ChatData] = []
        self._lock = Lock()

    def add_chat(self, chat_id: int, message_id: int, path: str) -> None:
        """–î–æ–±–∞–≤–ª—è–µ—Ç —á–∞—Ç –≤ –æ—á–µ—Ä–µ–¥—å"""
        logging.info('Adding new chat to queue')
        with self._lock:
            self._chat_data.append(ChatData(chat_id, message_id, path))

    def remove_chat(self) -> None:
        """–£–¥–∞–ª—è–µ—Ç –ø–µ—Ä–≤—ã–π —á–∞—Ç –∏–∑ –æ—á–µ—Ä–µ–¥–∏"""
        logging.info('Removing first chat from queue')
        with self._lock:
            if self._chat_data:
                self._chat_data.pop(0)

    def display_chats(self) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä–æ–∫–æ–≤–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –≤—Å–µ—Ö —á–∞—Ç–æ–≤ –≤ –æ—á–µ—Ä–µ–¥–∏"""
        logging.info('Displaying all chats in queue')
        with self._lock:
            if not self._chat_data:
                return "No chats in queue"
            
            result = []
            for item in self._chat_data:
                result.append(f"Chat: {item.chat_id}, Message: {item.message_id}, Path: {item.path}")
            return "\n".join(result)

    def get_first_chat(self) -> Optional[ChatData]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–µ—Ä–≤—ã–π —á–∞—Ç –≤ –æ—á–µ—Ä–µ–¥–∏ –±–µ–∑ —É–¥–∞–ª–µ–Ω–∏—è"""
        logging.info('Getting first chat in queue')
        with self._lock:
            return self._chat_data[0] if self._chat_data else None

    def count_chats(self) -> int:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Ç–æ–≤ –≤ –æ—á–µ—Ä–µ–¥–∏"""
        with self._lock:
            return len(self._chat_data)

    def is_empty(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –ø—É—Å—Ç–∞ –ª–∏ –æ—á–µ—Ä–µ–¥—å"""
        with self._lock:
            return len(self._chat_data) == 0


class ConnectionManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º"""
    
    def __init__(self, bot_token: str, max_retries: int = 5, retry_delay: int = 5):
        self.bot_token = bot_token
        self.max_retries = max_retries
        self.retry_delay = retry_delay
        self._connection_errors = (
            requests.exceptions.ConnectionError,
            requests.exceptions.Timeout,
            requests.exceptions.HTTPError,
            ProtocolError,
            RemoteDisconnected,
            socket.error,
            OSError,
            telebot.apihelper.ApiTelegramException
        )
    
    def check_internet_connection(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å DNS Google
            socket.create_connection(("8.8.8.8", 53), timeout=3)
            return True
        except (socket.error, OSError):
            return False
    
    def wait_for_connection(self) -> None:
        """–ñ–¥–µ—Ç –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è"""
        while not self.check_internet_connection():
            logging.warning("–ù–µ—Ç –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è. –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥...")
            time.sleep(10)
        logging.info("–ò–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
    
    def execute_with_retry(self, func, *args, **kwargs):
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º–∏ –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏"""
        for attempt in range(self.max_retries):
            try:
                return func(*args, **kwargs)
            except self._connection_errors as e:
                logging.error(f"–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{self.max_retries}): {e}")
                
                if attempt < self.max_retries - 1:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
                    if not self.check_internet_connection():
                        self.wait_for_connection()
                    
                    delay = self.retry_delay * (2 ** attempt)  # –≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
                    logging.info(f"–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ —á–µ—Ä–µ–∑ {delay} —Å–µ–∫—É–Ω–¥...")
                    time.sleep(delay)
                else:
                    logging.error("–í—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∏—Å—á–µ—Ä–ø–∞–Ω—ã")
                    raise
        
        return None


class VoiceBot:
    def __init__(self, config: Optional[Config] = None):
        self.config = config or Config.from_env()
        self.setup()

        self.bot = telebot.TeleBot(self.config.telegram_bot_token)
        self.connection_manager = ConnectionManager(self.config.telegram_bot_token)
        logging.info('API Token obtained')

        self.chat_manager = ChatManager()

        # –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –∏—Å–∫–ª—é—á–µ–Ω–∏–π
        try:
            logging.info('Loading model...')

            # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ cuda
            device = "cuda" if cuda.is_available() else "cpu"

            self.model = whisper.load_model("turbo", device=device)
            logging.info('Model loaded')
        except Exception as e:
            logging.error(f'Error loading model: {e}')
            exit(1)

    def setup(self):
        os.makedirs(self.config.voice_folder, exist_ok=True)
        logging.info('Voice messages folder is ready')

        os.makedirs(self.config.video_note_folder, exist_ok=True)
        logging.info('Video notes folder is ready')

    def start(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º"""
        logging.info('Bot started')
        
        threading_list = [
            Thread(target=self.voice_handler, daemon=True),
            #Thread(target=self.queue_manager, daemon=True)
        ]

        for thread in threading_list:
            thread.start()
            
        self.register_handlers()
        
        # –ó–∞–ø—É—Å–∫ polling —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º
        self.start_polling_with_retry()
    
    def start_polling_with_retry(self):
        """–ó–∞–ø—É—Å–∫ polling —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –ø—Ä–∏ —Å–±–æ—è—Ö"""
        while True:
            try:
                logging.info("–ó–∞–ø—É—Å–∫ polling...")
                self.bot.polling(none_stop=True, interval=0, timeout=20)
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ polling: {e}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
                if not self.connection_manager.check_internet_connection():
                    logging.warning("–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ")
                    self.connection_manager.wait_for_connection()
                
                # –ü–∞—É–∑–∞ –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–æ–º
                retry_delay = 10
                logging.info(f"–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ {retry_delay} —Å–µ–∫—É–Ω–¥...")
                time.sleep(retry_delay)
                
                # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
                try:
                    self.bot.stop_polling()
                    self.bot = telebot.TeleBot(self.config.telegram_bot_token)
                    self.register_handlers()
                    logging.info("–ë–æ—Ç –ø–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
                except Exception as reinit_error:
                    logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–æ—Ç–∞: {reinit_error}")
                    time.sleep(5)

    def register_handlers(self):
        @self.bot.message_handler(content_types=['voice'])
        def handle_voice(message):
            if self.config.debug_mode and self.config.debug_chat_id and message.chat.id != self.config.debug_chat_id:
                self.connection_manager.execute_with_retry(
                    self.bot.reply_to, message, '–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –±–æ—Ç –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–∞ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–∏, –ø—Ä–∏–Ω–æ—Å–∏–º –∏–∑–≤–∏–Ω–µ–Ω–∏—è'
                )
                return
            self.process_voice_message(message)

        @self.bot.message_handler(content_types=['video_note'])
        def handle_video_note(message):
            if self.config.debug_mode and self.config.debug_chat_id and message.chat.id != self.config.debug_chat_id:
                self.connection_manager.execute_with_retry(
                    self.bot.reply_to, message, '–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –±–æ—Ç –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–∞ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–∏, –ø—Ä–∏–Ω–æ—Å–∏–º –∏–∑–≤–∏–Ω–µ–Ω–∏—è'
                )
                return
            self.process_video_note_message(message)

        @self.bot.message_handler(commands=['check'])
        def check_queue(message):
            if self.config.debug_mode and self.config.debug_chat_id and message.chat.id != self.config.debug_chat_id:
                self.connection_manager.execute_with_retry(
                    self.bot.reply_to, message, '–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –±–æ—Ç –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–∞ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–∏, –ø—Ä–∏–Ω–æ—Å–∏–º –∏–∑–≤–∏–Ω–µ–Ω–∏—è'
                )
                return
            chat_data = self.chat_manager.display_chats()
            self.connection_manager.execute_with_retry(
                self.bot.reply_to, message, chat_data
            )

        @self.bot.message_handler(commands=['everyone'])
        def ping_all(message):
            if self.config.debug_mode and self.config.debug_chat_id and message.chat.id != self.config.debug_chat_id:
                self.connection_manager.execute_with_retry(
                    self.bot.reply_to, message, '–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –±–æ—Ç –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–∞ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–∏, –ø—Ä–∏–Ω–æ—Å–∏–º –∏–∑–≤–∏–Ω–µ–Ω–∏—è'
                )
                return
            self.process_ping_all(message)

    def process_voice_message(self, message):
        try:
            sent_message = self.connection_manager.execute_with_retry(
                self.bot.reply_to, message, '–í –æ—á–µ—Ä–µ–¥–∏...'
            )
            if not sent_message:
                logging.error("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –æ—á–µ—Ä–µ–¥—å")
                return
                
            file_info = self.connection_manager.execute_with_retry(
                self.bot.get_file, message.voice.file_id
            )
            
            if not file_info or not file_info.file_path:
                logging.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ")
                return
                
            downloaded_file = self.connection_manager.execute_with_retry(
                self.bot.download_file, file_info.file_path
            )
            
            if not downloaded_file:
                logging.error("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª")
                return

            file_name = os.path.join(
                self.config.voice_folder, f"voice_{message.from_user.id}_{message.message_id}.ogg")

            with open(file_name, 'wb') as voice_file:
                voice_file.write(downloaded_file)

            self.chat_manager.add_chat(message.chat.id, sent_message.message_id, file_name)
        except Exception as e:
            logging.error(f'Error processing voice message: {e}')

    def process_video_note_message(self, message):
        try:
            sent_message = self.connection_manager.execute_with_retry(
                self.bot.reply_to, message, '–í –æ—á–µ—Ä–µ–¥–∏...'
            )
            if not sent_message:
                logging.error("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –æ—á–µ—Ä–µ–¥—å")
                return
                
            file_info = self.connection_manager.execute_with_retry(
                self.bot.get_file, message.video_note.file_id
            )
            
            if not file_info or not file_info.file_path:
                logging.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ")
                return
                
            downloaded_file = self.connection_manager.execute_with_retry(
                self.bot.download_file, file_info.file_path
            )
            
            if not downloaded_file:
                logging.error("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª")
                return

            file_name_video = os.path.join(
                self.config.video_note_folder, f"video_{message.from_user.id}_{message.message_id}.mp4")
            file_name_audio = os.path.join(
                self.config.video_note_folder, f"video_{message.from_user.id}_{message.message_id}.ogg")

            with open(file_name_video, 'wb') as video_file:
                video_file.write(downloaded_file)

            audio = AudioSegment.from_file(file_name_video, format="mp4")
            audio.export(file_name_audio, format="mp3")

            os.remove(file_name_video)
            
            self.chat_manager.add_chat(message.chat.id, sent_message.message_id, file_name_audio)
        except Exception as e:
            logging.error(f'Error processing video note: {e}')

    def voice_handler(self):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—á–µ—Ä–µ–¥–∏ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        while True:
            try:
                if not self.chat_manager.is_empty():
                    first_chat = self.chat_manager.get_first_chat()
                    if first_chat:
                        self._process_transcription(first_chat)
                    else:
                        time.sleep(1)
                else:
                    time.sleep(1)
            except Exception as e:
                logging.error(f'Critical error in voice_handler: {e}')
                time.sleep(5)  # –ë–æ–ª—å—à–µ –≤—Ä–µ–º–µ–Ω–∏ –ø—Ä–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–π –æ—à–∏–±–∫–µ

    def _process_transcription(self, chat_data: ChatData) -> None:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ –¥–ª—è –æ–¥–Ω–æ–≥–æ —á–∞—Ç–∞"""
        file_path = Path(chat_data.path)
        
        try:
            self.connection_manager.execute_with_retry(
                self.bot.edit_message_text,
                chat_id=chat_data.chat_id,
                message_id=chat_data.message_id,
                text="–†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ...",
                parse_mode='HTML'
            )

            start_time = time.time()
            result = self.model.transcribe(str(file_path), language='ru')
            transcription = result.get('text', '') if isinstance(result, dict) else str(result)
            duration = time.time() - start_time

            if not transcription or not str(transcription).strip():
                self.connection_manager.execute_with_retry(
                    self.bot.edit_message_text,
                    chat_id=chat_data.chat_id,
                    message_id=chat_data.message_id,
                    text="–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ä–µ—á—å –≤ –∞—É–¥–∏–æ–∑–∞–ø–∏—Å–∏",
                    parse_mode='HTML'
                )
                return

            self._send_transcription_messages(chat_data, str(transcription), duration)

        except Exception as e:
            logging.error(f'Error during transcription: {e}')
            with contextlib.suppress(Exception):
                self.connection_manager.execute_with_retry(
                    self.bot.edit_message_text,
                    chat_id=chat_data.chat_id,
                    message_id=chat_data.message_id,
                    text="–û—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è",
                    parse_mode='HTML'
                )
        finally:
            if file_path.exists():
                file_path.unlink()
            self.chat_manager.remove_chat()

    def _send_transcription_messages(self, chat_data: ChatData, transcription: str, duration: float) -> None:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π —Å —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–µ–π"""
        messages = self.split_text(transcription, self.config.max_message_length)
        
        if not messages:
            return
            
        # –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–µ—Ä–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        first_message_text = (
            f"–†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç:\n\n"
            f"<blockquote expandable>{messages[0]}</blockquote>\n\n"
            f"–í—Ä–µ–º—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è: {duration:.2f} —Å–µ–∫—É–Ω–¥"
        )
        
        self.connection_manager.execute_with_retry(
            self.bot.edit_message_text,
            chat_id=chat_data.chat_id,
            message_id=chat_data.message_id,
            text=first_message_text,
            parse_mode='HTML'
        )
        
        # –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        if len(messages) > 1:
            previous_message_id = chat_data.message_id
            for msg in messages[1:]:
                try:
                    time.sleep(2)  # –°–æ–±–ª—é–¥–µ–Ω–∏–µ –ª–∏–º–∏—Ç–æ–≤ API
                    sent_message = self.connection_manager.execute_with_retry(
                        self.bot.send_message,
                        chat_id=chat_data.chat_id,
                        text=f"<blockquote expandable>{msg}</blockquote>",
                        parse_mode='HTML',
                        reply_to_message_id=previous_message_id
                    )
                    if sent_message:
                        previous_message_id = sent_message.message_id
                except Exception as e:
                    logging.error(f'Error sending continuation message: {e}')
                    break

    def split_text(self, text: str, max_length: int) -> List[str]:
        """–£–ª—É—á—à–µ–Ω–Ω–æ–µ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —Å —É—á–µ—Ç–æ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π"""
        if len(text) <= max_length:
            return [text]
        
        # –ü–æ–ø—ã—Ç–∫–∞ —Ä–∞–∑–¥–µ–ª–∏—Ç—å –ø–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º
        sentences = text.split('. ')
        messages = []
        current_message = ""
        
        for sentence in sentences:
            sentence = sentence.strip()
            if not sentence:
                continue
                
            # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ—á–∫—É –æ–±—Ä–∞—Ç–Ω–æ, –µ—Å–ª–∏ –æ–Ω–∞ –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞
            if not sentence.endswith('.') and sentence != sentences[-1]:
                sentence += '.'
            
            if len(current_message) + len(sentence) + 1 <= max_length:
                current_message += (" " if current_message else "") + sentence
            else:
                if current_message:
                    messages.append(current_message)
                
                # –ï—Å–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ, —Ä–∞–∑–¥–µ–ª—è–µ–º –ø–æ —Å–ª–æ–≤–∞–º
                if len(sentence) > max_length:
                    words = sentence.split()
                    word_message = ""
                    for word in words:
                        if len(word_message) + len(word) + 1 <= max_length:
                            word_message += (" " if word_message else "") + word
                        else:
                            if word_message:
                                messages.append(word_message)
                            word_message = word
                    if word_message:
                        current_message = word_message
                else:
                    current_message = sentence
        
        if current_message:
            messages.append(current_message)
        
        return messages

    def queue_manager(self):
        """–ú–µ–Ω–µ–¥–∂–µ—Ä –æ—á–µ—Ä–µ–¥–∏ —Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º —Å—Ç–∞—Ç—É—Å–∞ —Å–æ–æ–±—â–µ–Ω–∏–π"""
        previous_queue_states = {}
        while True:
            try:
                current_queue_length = self.chat_manager.count_chats()
                # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ø–∏—é –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏
                with self.chat_manager._lock:
                    chat_data_copy = self.chat_manager._chat_data.copy()
                
                for index, chat in enumerate(chat_data_copy):
                    chat_id = chat.chat_id
                    message_id = chat.message_id
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Å—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω–∏–ª—Å—è
                    if (chat_id, message_id) not in previous_queue_states or previous_queue_states[
                        (chat_id, message_id)] != index:
                        try:
                            if index > 0:
                                self.connection_manager.execute_with_retry(
                                    self.bot.edit_message_text,
                                    chat_id=chat_id,
                                    message_id=message_id,
                                    text="–í –æ—á–µ—Ä–µ–¥–∏",
                                )
                            previous_queue_states[(chat_id, message_id)] = index
                        except Exception as e:
                            logging.error(f'Failed to edit message: {e}')
                time.sleep(1)
            except Exception as e:
                logging.error(f'Error in queue manager: {e}')
                time.sleep(1)

    def process_ping_all(self, message):
        chat_id = message.chat.id
        all_members = []

        try:
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–∞—Ç–µ
            chat = self.connection_manager.execute_with_retry(
                self.bot.get_chat, chat_id
            )

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –±–æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
            bot_member = self.connection_manager.execute_with_retry(
                self.bot.get_chat_member, chat_id, self.bot.get_me().id
            )
            
            if not bot_member or bot_member.status not in ['administrator', 'creator']:
                self.connection_manager.execute_with_retry(
                    self.bot.send_message, chat_id, "–ë–æ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º, —á—Ç–æ–±—ã —É–ø–æ–º–∏–Ω–∞—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤."
                )
                return

            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —á–∞—Ç–∞ (–º–æ–∂–µ—Ç –±—ã—Ç—å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–æ)
            members = self.connection_manager.execute_with_retry(
                self.bot.get_chat_administrators, chat_id
            )
            
            if not members:
                self.connection_manager.execute_with_retry(
                    self.bot.send_message, chat_id, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤."
                )
                return

            # –§–æ—Ä–º–∏—Ä—É–µ–º —É–ø–æ–º–∏–Ω–∞–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
            for member in members:
                user = member.user
                if user.is_bot:
                    continue
                if user.username:
                    mention = f'@{user.username}'
                else:
                    mention = f'<a href="tg://user?id={user.id}">{user.first_name}</a>'
                all_members.append(mention)

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ –µ—Å—Ç—å —É–ø–æ–º–∏–Ω–∞–Ω–∏—è
            ping_message = ' '.join(all_members)

            if ping_message:
                self.connection_manager.execute_with_retry(
                    self.bot.send_message, chat_id, ping_message, parse_mode='HTML'
                )
            else:
                self.connection_manager.execute_with_retry(
                    self.bot.send_message, chat_id, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–ª—è —É–ø–æ–º–∏–Ω–∞–Ω–∏—è."
                )
        except Exception as e:
            logging.error(f'Error in ping_all: {e}')
            self.connection_manager.execute_with_retry(
                self.bot.send_message, chat_id, f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {e}"
            )


if __name__ == "__main__":
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —É—Ä–æ–≤–Ω—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    config = Config.from_env()
    setup_logging('bot.log', config.log_level)
    
    voice_bot = VoiceBot(config)
    voice_bot.start()




================================================================
End of Codebase
================================================================
